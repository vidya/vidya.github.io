{"version":3,"sources":["components/RewardBoard/ItemTypes.js","components/RewardBoard/RewardItemSource/index.js","components/RewardBoard/CategoryDropTarget/index.js","components/RewardBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","style","cursor","RewardItemSource","name","useDrag","item","type","end","monitor","dropResult","getDropResult","console","log","collect","isDragging","drag","opacity","ref","CategoryDropTarget","props","myDropTarget","drop","useDrop","accept","dropItem","isOver","canDrop","getItem","backgroundColor","laneName","CategoryHeadings","targets","id","map","target","key","SwimLane","lane","className","categoryRewards","reward","TopColumnHeadings","SwimLanes","lanes","RewardBoard","categoryDropTargets","useState","swimLanes","push","App","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46997431.chunk.js","sourcesContent":["export const ItemTypes = {\n    Reward: 'reward',\n}\n","import React from 'react'\nimport { useDrag } from 'react-dnd'\nimport { ItemTypes } from '../ItemTypes'\n\nconst style = {\n    cursor: 'move',\n}\n\nexport const RewardItemSource = ({ name }) => {\n    const [{ isDragging }, drag] = useDrag({\n        item: { name, type: ItemTypes.Reward },\n        end: (item, monitor) => {\n            const dropResult = monitor.getDropResult()\n            if (item && dropResult) {\n                console.log(`RewardItemSource: You dropped ${item.name} into ${dropResult.name}!`)\n            }\n        },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    })\n    const opacity = isDragging ? 0.4 : 1\n    return (\n        <div ref={drag} style={{ ...style, opacity }}>\n            {name}\n        </div>\n    )\n}\n","import React from 'react'\nimport { useDrop } from 'react-dnd'\nimport { ItemTypes } from '../ItemTypes'\nimport { RewardItemSource }  from \"../RewardItemSource\";\n\nconst style = {\n    // height: '4rem',\n    // width: '4rem',\n    // height: '12rem',\n    // width: '12rem',\n\n    // marginRight: '1.5rem',\n    // marginBottom: '1.5rem',\n    // color: 'lightgreen',\n    // padding: '1rem',\n    // textAlign: 'center',\n    // fontSize: '1rem',\n    // lineHeight: 'normal',\n    // float: 'left',\n}\n\nexport const CategoryDropTarget = (props) => {\n    const myDropTarget = (props) => {\n        console.log(`CategoryDropTarget: dropItem: ${props.name}`)\n        return <div ref={drop}>{props.name}</div>\n    }\n    const [{ canDrop, isOver, dropResult, dropItem }, drop] = useDrop({\n        accept: ItemTypes.Reward,\n        drop: () => (\n            { name: myDropTarget(dropItem) }\n            ),\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop(),\n            dropResult: monitor.getDropResult(),\n            dropItem: monitor.getItem()\n        }),\n    })\n    const isActive = canDrop && isOver\n    let backgroundColor = 'white'\n    if (isActive) {\n        // backgroundColor = 'darkgreen'\n        backgroundColor = 'white'\n        console.log(`CategoryDropTarget: (category, reward): (${props.name}, ${dropItem.name})`)\n\n    } else if (canDrop) {\n        // backgroundColor = 'darkkhaki'\n        backgroundColor = 'white'\n    }\n\n    if (dropItem && (props.laneName === dropItem.name)) {\n        return (\n            <div ref={drop} style={{ ...style, backgroundColor }}>\n                <RewardItemSource name={dropItem.name} />\n            </div>\n        )\n    }\n    else {\n        return (\n            <div ref={drop} style={{ ...style, backgroundColor }}>\n                {/*{isActive ? 'Drop' : 'Drag'}*/}\n                {''}\n            </div>\n        )\n    }\n}\n","import React, { useState } from 'react';\nimport './style.scss';\n\nimport { RewardItemSource } from './RewardItemSource'\nimport { CategoryDropTarget } from './CategoryDropTarget'\n\nconst  CategoryHeadings = ({targets}) => (\n    <ul id={'categoryHeadings'}>\n        {\n            targets.map(target => <li key={`${target.id}`}>{`${target.name}`}</li>)\n        }\n    </ul>\n)\n\nconst SwimLane = ({ lane }) => (\n    <ul className={'swimLane'}>\n        <li className={'laneName'}>\n            <RewardItemSource name={`${lane.name}`} />\n        </li>\n        {lane.categoryRewards.map(reward => (\n            <li  key={`${reward.id}`} className={'swimLaneReward'}>\n                <CategoryDropTarget\n                    laneName={`${lane.name}`}\n                    name={`${reward.name}`}\n                    />\n            </li>))\n        }\n    </ul>\n)\n\nconst TopColumnHeadings = () => (\n    <div id={'headingsRow'}>\n        <ul id={'colHeadings'}>\n            <li className={'colHeading'} >Rewards</li>\n            <li className={'colHeading'} >Categories</li>\n        </ul>\n    </div>\n)\n\nconst SwimLanes = ({lanes}) => (\n    <div id={'swimLanes'}>\n        <ul id={'swimLanes'}>\n            {\n                lanes.map(lane => <li key={`${lane.id}`}>\n                    <SwimLane lane={lane} />\n                </li>)\n            }\n        </ul>\n    </div>\n)\n\nexport  default function RewardBoard(props) {\n    const rewardItemSources = [\n        { id: 1, name: \"R1\"},\n        { id: 2, name: \"R2\"},\n        { id: 3, name: \"R3\"},\n        { id: 4, name: \"R4\"},\n        { id: 5, name: \"R5\"},\n    ]\n\n    const categoryDropTargets = [\n        { id: 1, name: \"C1\"},\n        { id: 2, name: \"C2\"},\n        { id: 3, name: \"C3\"},\n        { id: 4, name: \"C4\"},\n        { id: 5, name: \"C5\"},\n    ]\n\n    const [dropTargets, setDropTargets] = useState(categoryDropTargets)\n\n    let swimLanes = rewardItemSources.map(item => ({id: item.id, name: item.name, categoryRewards: []}))\n    swimLanes[0].categoryRewards.push({id: \"1\", name:\"C1\"})\n    swimLanes[1].categoryRewards.push({id: \"2\", name:\"C2\"})\n    swimLanes[1].categoryRewards.push({id: \"3\", name:\"C2\"})\n\n    return (\n        <div id={'rewardsBoard'}>\n            <TopColumnHeadings />\n\n            <CategoryHeadings targets={categoryDropTargets} />\n            <SwimLanes lanes={swimLanes} />\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\n\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nimport RewardBoard from \"./components/RewardBoard/\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          Reward Board\n      </header>\n        <DndProvider backend={HTML5Backend}>\n            <RewardBoard />\n        </DndProvider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}